// Generated by gencpp from file temoto/Status.msg
// DO NOT EDIT!


#ifndef TEMOTO_MESSAGE_STATUS_H
#define TEMOTO_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseStamped.h>

namespace temoto
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , scale_by(0.0)
    , live_hand_pose()
    , cartesian_wayposes()
    , in_natural_control_mode(false)
    , orientation_free(false)
    , position_unlimited(false)
    , position_forward_only(false)
    , in_navigation_mode(false)
    , end_effector_pose()  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , scale_by(0.0)
    , live_hand_pose(_alloc)
    , cartesian_wayposes(_alloc)
    , in_natural_control_mode(false)
    , orientation_free(false)
    , position_unlimited(false)
    , position_forward_only(false)
    , in_navigation_mode(false)
    , end_effector_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _scale_by_type;
  _scale_by_type scale_by;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _live_hand_pose_type;
  _live_hand_pose_type live_hand_pose;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _cartesian_wayposes_type;
  _cartesian_wayposes_type cartesian_wayposes;

   typedef uint8_t _in_natural_control_mode_type;
  _in_natural_control_mode_type in_natural_control_mode;

   typedef uint8_t _orientation_free_type;
  _orientation_free_type orientation_free;

   typedef uint8_t _position_unlimited_type;
  _position_unlimited_type position_unlimited;

   typedef uint8_t _position_forward_only_type;
  _position_forward_only_type position_forward_only;

   typedef uint8_t _in_navigation_mode_type;
  _in_navigation_mode_type in_navigation_mode;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _end_effector_pose_type;
  _end_effector_pose_type end_effector_pose;




  typedef boost::shared_ptr< ::temoto::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::temoto::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::temoto::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::temoto::Status > StatusPtr;
typedef boost::shared_ptr< ::temoto::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::temoto::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::temoto::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace temoto

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'temoto': ['/home/conor/catkin_ws/src/temoto_intuitive_teleoperator/temoto/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::temoto::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::temoto::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::temoto::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::temoto::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::temoto::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::temoto::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::temoto::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8695ecd3f5ef0a2fa62cfb57020ea31";
  }

  static const char* value(const ::temoto::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8695ecd3f5ef0a2ULL;
  static const uint64_t static_value2 = 0xfa62cfb57020ea31ULL;
};

template<class ContainerAllocator>
struct DataType< ::temoto::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "temoto/Status";
  }

  static const char* value(const ::temoto::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::temoto::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
float64 scale_by\n\
geometry_msgs/PoseStamped live_hand_pose\n\
geometry_msgs/Pose[] cartesian_wayposes\n\
\n\
bool in_natural_control_mode\n\
bool orientation_free\n\
bool position_unlimited\n\
bool position_forward_only\n\
\n\
bool in_navigation_mode\n\
\n\
geometry_msgs/PoseStamped end_effector_pose\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::temoto::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::temoto::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.scale_by);
      stream.next(m.live_hand_pose);
      stream.next(m.cartesian_wayposes);
      stream.next(m.in_natural_control_mode);
      stream.next(m.orientation_free);
      stream.next(m.position_unlimited);
      stream.next(m.position_forward_only);
      stream.next(m.in_navigation_mode);
      stream.next(m.end_effector_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::temoto::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::temoto::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "scale_by: ";
    Printer<double>::stream(s, indent + "  ", v.scale_by);
    s << indent << "live_hand_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.live_hand_pose);
    s << indent << "cartesian_wayposes[]" << std::endl;
    for (size_t i = 0; i < v.cartesian_wayposes.size(); ++i)
    {
      s << indent << "  cartesian_wayposes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.cartesian_wayposes[i]);
    }
    s << indent << "in_natural_control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_natural_control_mode);
    s << indent << "orientation_free: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.orientation_free);
    s << indent << "position_unlimited: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_unlimited);
    s << indent << "position_forward_only: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_forward_only);
    s << indent << "in_navigation_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_navigation_mode);
    s << indent << "end_effector_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.end_effector_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEMOTO_MESSAGE_STATUS_H
