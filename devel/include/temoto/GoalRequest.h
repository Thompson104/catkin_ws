// Generated by gencpp from file temoto/GoalRequest.msg
// DO NOT EDIT!


#ifndef TEMOTO_MESSAGE_GOALREQUEST_H
#define TEMOTO_MESSAGE_GOALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>

namespace temoto
{
template <class ContainerAllocator>
struct GoalRequest_
{
  typedef GoalRequest_<ContainerAllocator> Type;

  GoalRequest_()
    : action_type(0)
    , goal()
    , named_target()
    , cartesian_wayposes()
    , cartesian_frame()
    , tolerance_posit(0.0)
    , tolerance_orien(0.0)  {
    }
  GoalRequest_(const ContainerAllocator& _alloc)
    : action_type(0)
    , goal(_alloc)
    , named_target(_alloc)
    , cartesian_wayposes(_alloc)
    , cartesian_frame(_alloc)
    , tolerance_posit(0.0)
    , tolerance_orien(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _action_type_type;
  _action_type_type action_type;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _named_target_type;
  _named_target_type named_target;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _cartesian_wayposes_type;
  _cartesian_wayposes_type cartesian_wayposes;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cartesian_frame_type;
  _cartesian_frame_type cartesian_frame;

   typedef float _tolerance_posit_type;
  _tolerance_posit_type tolerance_posit;

   typedef float _tolerance_orien_type;
  _tolerance_orien_type tolerance_orien;


    enum { PLAN = 1u };
     enum { EXECUTE = 2u };
     enum { GO = 3u };
     enum { CARTESIAN_COMPUTE = 4u };
     enum { ABORT = 255u };
 

  typedef boost::shared_ptr< ::temoto::GoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::temoto::GoalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoalRequest_

typedef ::temoto::GoalRequest_<std::allocator<void> > GoalRequest;

typedef boost::shared_ptr< ::temoto::GoalRequest > GoalRequestPtr;
typedef boost::shared_ptr< ::temoto::GoalRequest const> GoalRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::temoto::GoalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::temoto::GoalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace temoto

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'temoto': ['/home/conor/catkin_ws/src/temoto_intuitive_teleoperator/temoto/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::temoto::GoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::temoto::GoalRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::temoto::GoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::temoto::GoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::temoto::GoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::temoto::GoalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::temoto::GoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32b1a3be5545e6c78b5d65df6158ff67";
  }

  static const char* value(const ::temoto::GoalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32b1a3be5545e6c7ULL;
  static const uint64_t static_value2 = 0x8b5d65df6158ff67ULL;
};

template<class ContainerAllocator>
struct DataType< ::temoto::GoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "temoto/GoalRequest";
  }

  static const char* value(const ::temoto::GoalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::temoto::GoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PLAN=1\n\
uint8 EXECUTE=2\n\
uint8 GO=3\n\
uint8 CARTESIAN_COMPUTE=4\n\
uint8 ABORT=255\n\
uint8 action_type\n\
\n\
\n\
geometry_msgs/PoseStamped goal\n\
\n\
\n\
string named_target\n\
\n\
\n\
geometry_msgs/Pose[] cartesian_wayposes\n\
string cartesian_frame\n\
\n\
\n\
\n\
float32 tolerance_posit\n\
float32 tolerance_orien\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::temoto::GoalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::temoto::GoalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_type);
      stream.next(m.goal);
      stream.next(m.named_target);
      stream.next(m.cartesian_wayposes);
      stream.next(m.cartesian_frame);
      stream.next(m.tolerance_posit);
      stream.next(m.tolerance_orien);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::temoto::GoalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::temoto::GoalRequest_<ContainerAllocator>& v)
  {
    s << indent << "action_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action_type);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "named_target: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.named_target);
    s << indent << "cartesian_wayposes[]" << std::endl;
    for (size_t i = 0; i < v.cartesian_wayposes.size(); ++i)
    {
      s << indent << "  cartesian_wayposes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.cartesian_wayposes[i]);
    }
    s << indent << "cartesian_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cartesian_frame);
    s << indent << "tolerance_posit: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_posit);
    s << indent << "tolerance_orien: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance_orien);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEMOTO_MESSAGE_GOALREQUEST_H
