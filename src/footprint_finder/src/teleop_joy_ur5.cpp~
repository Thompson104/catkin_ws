#include <ros/ros.h>
#include <sensor_msgs/Joy.h>
#include <vector>
#include "std_msgs/Bool.h"
#include "std_msgs/String.h"
#include "geometry_msgs/WrenchStamped.h"
#include "geometry_msgs/TwistStamped.h"

class TeleopUR5
{
public: 
  TeleopUR5();

private: 
  void joyCallback(const sensor_msgs::Joy::ConstPtr& joy);

  ros::NodeHandle nh_;
  
  float linear_velocity, rotational_velocity, acceleration;	// Fixed speeds, acceleration...
  ros::Subscriber joy_sub_;					// Joystick Subscriber
  ros::Publisher vel_pub_l_;					// Left Arm - Speed Publisher
  ros::Publisher vel_pub_r_;					// Right Arm - Speed Publisher

  sensor_msgs::Joy joy_vals;					// Joystick State
  bool teleop_engaged;						//   Teleop Enabled
  bool left_arm; 						//   Left Arm under control
  std_msgs::String rspeeds; 
  std_msgs::String lspeeds;

  // Axis Names (but used like buttons)
  int left_deadman; 					// Logitech 'Left Trigger'
  int right_deadman; 					// Logitech 'Right Trigger'
  int long_axis; 						// Logitech 'U/D Touchpad'
  int lat_axis;						// Logitech 'R/L Touchpad'
  // Button Names
  int teleop_toggle; 					// Logitech  'Start'
  int z_move_plus;						// Logitech 'Left Bumper'
  int z_move_minus; 					// Logitech 'Right Bumper'

  // Preset Arm Positions
  std_msgs::String preset_pose_l1, preset_pose_l2, preset_pose_r1, preset_pose_r2;

};

TeleopUR5::TeleopUR5():
  linear_velocity(0.1),
  rotational_velocity(0.1),
  acceleration(0.1)
{
  
  //Params
  
  joy_sub_ = nh_.subscribe<sensor_msgs::Joy>("joy", 10, &TeleopUR5::joyCallback, this);
  
  vel_pub_l_ = nh_.advertise<std_msgs::String>("/right_ur5_controller/right_ur5_URScript", 1);
  vel_pub_r_ = nh_.advertise<std_msgs::String>("/left_ur5_controller/left_ur5_URScript", 1);

  // Axis Names (but used like buttons)
  left_deadman = 2; 					// Logitech 'Left Trigger'
  right_deadman = 5; 					// Logitech 'Right Trigger'
  long_axis = 7; 						// Logitech 'U/D Touchpad'
  lat_axis = 6;						// Logitech 'R/L Touchpad'
  // Button Names
  teleop_toggle = 7; 					// Logitech  'Start'
  z_move_plus = 4;						// Logitech 'Left Bumper'
  z_move_minus = 5; 					// Logitech 'Right Bumper'

}

void TeleopUR5::joyCallback(const sensor_msgs::Joy::ConstPtr& joy)
{ 
  
  preset_pose_l1.data = "[1.5700663309038547, -0.583366489468496, 1.3239782491742567, -2.245655451074253, -2.3654086332394697, 2.9917274285644684]"; 	// ready
  preset_pose_l2.data = "[1.74533, -3.0543, 2.793, -1.6581, -3.0543, 3.04159]"; 									// stow_back
  preset_pose_r1.data = "[-1.6723568037420726, -2.7089519656986383, -0.6380074601702258, -1.0541854410679474, 2.143715333202654, 1.6428859457432818]"; 	// stow_back (is this not actually the new ready pose?)
  //preset1_pose_r1.data = "[-1.57, -2.88, -0.663, -1.221, 1.92, -1.57]" 										// ready (old? deprecated?)
  preset_pose_r1.data = "[-1.74533, -0.0873, -2.793, -1.5708, 3.0543, 3.04159]"; 									// stow_back

  if (1)//joy->buttons[teleop_toggle])
    teleop_engaged = !teleop_engaged;
    if (!teleop_engaged)
      1+1;//ROS_INFO("Teleop Disabled");//talk
      //log 
    else 
      1+1;//ROS_INFO("Teleop Enabled");//reset
      //talk
      //log 
    //ros::Duration(0.5).sleep();
    

}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "teleop_joy_ur5");  
  TeleopUR5 teleop_ur5;
  
  ros::spin();
}
